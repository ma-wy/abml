#!/usr/bin/env python3.8
# -*- coding: utf-8 -*-

import sys 
sys.path.append("/home/abml/zoe_ws/lib")
from mwy_lib import *
from mwy_path import *



class detect_table:
  def __init__(self):
#=======input==================================================================================
    self.bridge = CvBridge()
    self.rgb_sub = message_filters.Subscriber('/camera/color/image_raw', Image)
    self.rgb_sub.registerCallback(self.callback_rgb) 
#=======output==================================================================================
    self.interest_area_pub = rospy.Publisher("/table_rgb",Image,queue_size=10)
    self.table_frame_pub = rospy.Publisher("/table_frame",PoseStamped,queue_size=10)
#===============================================================================================
# members
    self.row = 720
    self.col = 1280
    self.blank_image = np.zeros((self.row,self.col,3), np.uint8)
    self.output = np.zeros((self.row,self.col,3), np.uint8)
    self.table_corners_mm = float32([[0,0],[600,0],[0,400],[600,400]])
    self.table_corners_pix = []
    
  def callback_rgb(self, data):
    print(data)
    self.blank_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
    contours, ids = detect_qrcode(self.blank_image, self.row, self.col)
    if len(contours) == 4:
      self.table_corners_pix = array([contours[3][2], contours[1][2], contours[0][2], contours[2][3]])
      '''
      if ids is not None:
        for i in range(len(ids)):
          aruco.drawDetectedMarkers(self.blank_image, contours, ids) # rgb image with green contours
      '''
      self.output = cv2.drawContours(self.blank_image, [self.table_corners_pix], 0, (0,255,0),3)
      self.interest_area_pub.publish(self.bridge.cv2_to_imgmsg(self.output, "passthrough"))
    
      self.table_corners_pix = float32(recorder_corners(self.table_corners_pix))
      matrix = cv2.getPerspectiveTransform(src=self.table_corners_pix, dst=self.table_corners_mm)
      R = tf.transformations.identity_matrix()
      R[0:3,0:3] = matrix 
      q = tf.transformations.quaternion_from_matrix(R)
      p = zeros(3)
      self.table_frame_pub.publish(give_PoseStamped('camera_color_optical_frame', q, p))
# class end=========================================================================================




def main(args):
 
  
  
  rospy.init_node('detect_table', anonymous=True)
  dt = detect_table()



  try:
    rospy.spin()    
  except KeyboardInterrupt:
    print("Shutting down")

if __name__ == '__main__':

    main(sys.argv)





