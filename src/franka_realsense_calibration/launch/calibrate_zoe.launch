<?xml version="1.0" ?>
<launch>

    <!-- Setting calibration namespace -->
    <arg name="eye_on_hand" default="true"/>
    <arg name="namespace_prefix" default="franka_realsense_handeyecalibration" />
    <arg name="namespace" value="$(arg namespace_prefix)_eye_on_hand"/>
   
    <!-- The input reference frames -->
    <arg name="robot_base_frame" default="panda_link0" />
    <arg name="robot_effector_frame" default="panda_EE" />
    <arg name="tracking_base_frame" default="camera_color_optical_frame" />
    <arg name="tracking_marker_frame" default="camera_marker" />
    
    <arg name="freehand_robot_movement" default="false" />
    <arg name="robot_velocity_scaling" default="0.3" />
    <arg name="robot_acceleration_scaling" default="0.2" />
    <arg name="translation_delta_meters" default="0.05" />
    <arg name="rotation_delta_degrees" default="25" />
    <arg name="move_group_namespace" default="/"/>
    <arg name="move_group" default="panda_manipulator" />
                
    
    <!-- Publish dummy frames while calibrating -->
    <arg name="publish_dummy" default="true" doc="if true, a dummy calibration will be published to keep all frames in a single tf tree, hence visualized in RViz" />
    
    <!-- GUI arguments -->
    <arg name="start_sampling_gui" default="true" doc="if true, rqt will be started with the provided perspective" />
    <arg name="rqt_perspective_file" default="$(find easy_handeye)/launch/rqt_easy_handeye.perspective" doc="the path to the rqt perspective file to be opened" />
    
    <!-- Dummy calibration to have a fully connected tf tree and see all frames -->
    <group if="$(arg publish_dummy)">
        <node unless="$(arg eye_on_hand)" name="dummy_handeye" pkg="tf" type="static_transform_publisher"
            args="1 1 1 0 1.5 0 $(arg robot_base_frame) $(arg tracking_base_frame) 10" />
        <node if="$(arg eye_on_hand)" name="dummy_handeye" pkg="tf" type="static_transform_publisher"
            args="0 0 0.05 0 0 0 $(arg robot_effector_frame) $(arg tracking_base_frame) 10" />
    </group>


    <!-- Start the robot backend outside the namespace, so that it can connect to a MoveGroup in the global namespace -->
    <!-- see https://github.com/ros-planning/moveit/issues/2364 -->
    <node unless="$(arg freehand_robot_movement)" name="easy_handeye_calibration_server_robot"
          pkg="easy_handeye"
          type="robot.py"
          output="screen" >
        <param name="calibration_namespace" value="$(arg namespace)" />
        <param name="translation_delta_meters" value="$(arg translation_delta_meters)" />
        <param name="rotation_delta_degrees" value="$(arg rotation_delta_degrees)" />
        <param name="max_velocity_scaling" value="$(arg robot_velocity_scaling)" />
        <param name="max_acceleration_scaling" value="$(arg robot_acceleration_scaling)" />
    </node>

    <group ns="$(arg namespace)">

        <!-- Store the parameters in the calibration's namespace-->
        <param name="eye_on_hand" value="$(arg eye_on_hand)"/>
        <param name="move_group_namespace" value="$(arg move_group_namespace)"/>
        <param name="move_group" value="$(arg move_group)"/>
        <param name="robot_base_frame" value="$(arg robot_base_frame)" />
        <param name="robot_effector_frame" value="$(arg robot_effector_frame)" />
        <param name="tracking_base_frame" value="$(arg tracking_base_frame)" />
        <param name="tracking_marker_frame" value="$(arg tracking_marker_frame)" />
        <param name="freehand_robot_movement" value="$(arg freehand_robot_movement)" />

        <!-- Start the backend -->
        <node name="easy_handeye_calibration_server"
              pkg="easy_handeye"
              type="calibrate.py"
              output="screen" />

        <!-- start rqt GUI for taking_samples -->
        <node if="$(arg start_sampling_gui)" name="$(anon namespace)_rqt" pkg="rqt_easy_handeye" type="rqt_easy_handeye" respawn="false" output="screen" />

        <!-- start the GUI for moving the robot around the starting pose -->
        <node unless="$(arg freehand_robot_movement)" name="calibration_mover" pkg="rqt_easy_handeye" type="rqt_calibrationmovements" respawn="false" >
            <param name="move_group" value="$(arg move_group)" />
            <param name="translation_delta_meters" value="$(arg translation_delta_meters)" />
            <param name="rotation_delta_degrees" value="$(arg rotation_delta_degrees)" />
            <param name="max_velocity_scaling" value="$(arg robot_velocity_scaling)" />
            <param name="max_acceleration_scaling" value="$(arg robot_acceleration_scaling)" />
        </node>

    </group>

</launch>
