#!/usr/bin/env python3.8
import sys 
sys.path.append("/home/abml/zoe_ws/lib")
from mwy_path import *
from mwy_lib import *

rospy.init_node("test")
from controller_manager_msgs.srv import SwitchController, LoadController
rospy.wait_for_service('/controller_manager/switch_controller')

switch_controller = rospy.ServiceProxy('/controller_manager/switch_controller', SwitchController)
#load_controller = rospy.ServiceProxy('/controller_manager/load_controller', LoadController)

#load_controller()
#ret = switch_controller(start_controllers='cartesian_variable_impedance_controller', stop_controllers='position_joint_trajectory_controller', strictness=1, start_asap=True, timeout=0.0)
#ret = switch_controller(start_controllers='position_joint_trajectory_controller', stop_controllers='cartesian_variable_impedance_controller', strictness=1, start_asap=True, timeout=0.0)
#ret = switch_controller(start_controllers='position_joint_trajectory_controller', strictness=1, start_asap=True, timeout=0.0)

# control orientation
h = Panda()
print("human friendly")

print(h.curr_pos) # [0.22035318 0.00104037 0.47687136]
print(h.curr_q)

p_ee = h.curr_pos
q_orig = h.curr_q
q_rot = angle_axis_to_q([0,0,0.3])
q_new = transformation_Q(q_orig,q_rot)
q_ee = list_2_quaternion(q_w_trans(q_new))
goal = array_quat_2_pose(p_ee, q_ee)


# control position
m = MoveGroupCommander("panda_arm") #ee_link = panda_link8
print(m.get_end_effector_link())

pose = m.get_current_pose() # panda_link8
p_ee, q_ee = ee_pose_link8_to_ee(pose)
print(p_ee)
print(q_ee)

pose_target = givePose(p,q)
m.set_pose_target(self, pose, end_effector_link=""):
m.go(self, joints=None, wait=True)

h.goal_pub.publish(goal)
#print(ret)




































    
    
    

