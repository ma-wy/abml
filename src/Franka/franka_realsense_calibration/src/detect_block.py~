#!/usr/bin/env python3.8
# -*- coding: utf-8 -*-

import sys 
sys.path.append("/home/abml/zoe_ws/lib")
from mwy_lib import *
from mwy_path import *

class detect_block:
  def __init__(self):
#=======input==================================================================================
    self.bridge = CvBridge()
    self.rgb_sub = message_filters.Subscriber('/camera/color/image_raw', Image)
    self.rgb_sub.registerCallback(self.callback_rgb) 
#=======output==================================================================================
    self.interest_area_pub = rospy.Publisher("/interestarea",Image,queue_size=10)
    self.block_poses_pub = rospy.Publisher("/block_poses",PoseArray,queue_size=10)
#===============================================================================================
# members
    self.row = 720
    self.col = 1280
    self.blank_image = np.zeros((self.row,self.col,3), np.uint8)
    self.output = np.zeros((self.row,self.col,3), np.uint8)


  def callback_rgb(self, data):
    self.blank_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
    contours, ids = detect_qrcode(self.blank_image, self.row, self.col)
    table_corners = array([contours[3][2], contours[1][2], contours[0][2], contours[2][3]])
    '''
    if ids is not None:
      for i in range(len(ids)):
        aruco.drawDetectedMarkers(self.blank_image, contours, ids) # rgb image with green contours
    '''
    self.output = cv2.drawContours(self.blank_image, [table_corners], 0, (0,255,0),3)
    self.interest_area_pub.publish(self.bridge.cv2_to_imgmsg(self.output, "passthrough"))
  

    '''
    print('#########################')
    poses = []
    for contour in contours:
      contour_3d = []
      for i in contour:
        contour_3d.append(array(trans_2D_to_3D(i[0])))
      print(contour_3d)
      print(array(contour_3d)[:,0])
      print(array(contour_3d)[:,1])
      p_x = mean(array(contour_3d)[:,0])
      p_y = mean(array(contour_3d)[:,1])
      x_axis = (contour_3d[1]-contour_3d[0])/norm(contour_3d[1]-contour_3d[0])
      y_axis = (contour_3d[-1]-contour_3d[0])/norm(contour_3d[-1]-contour_3d[0])
      q = pose_2D_to_3D(x_axis, y_axis)
      p = [p_x,p_y,0.05]
      poses.append(give_Pose(p,q))
    print(poses)
    pose_array = give_PoseArray('panda_link0', poses)
 

    self.block_poses_pub.publish(pose_array)
    '''
# class end=========================================================================================




def main(args):
  rospy.init_node('detect_block', anonymous=True)
  db = detect_block()
  try:
    rospy.spin()    
  except KeyboardInterrupt:
    print("Shutting down")

if __name__ == '__main__':

    main(sys.argv)





