// Generated by gencpp from file handover/hand_mp.msg
// DO NOT EDIT!


#ifndef HANDOVER_MESSAGE_HAND_MP_H
#define HANDOVER_MESSAGE_HAND_MP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace handover
{
template <class ContainerAllocator>
struct hand_mp_
{
  typedef hand_mp_<ContainerAllocator> Type;

  hand_mp_()
    : header()
    , handedness()
    , wrist()
    , thumb_tip()
    , index_tip()
    , middle_tip()
    , ring_tip()
    , pinky_tip()
    , index_mcp()
    , middle_mcp()
    , ring_mcp()
    , pinky_mcp()  {
    }
  hand_mp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , handedness(_alloc)
    , wrist(_alloc)
    , thumb_tip(_alloc)
    , index_tip(_alloc)
    , middle_tip(_alloc)
    , ring_tip(_alloc)
    , pinky_tip(_alloc)
    , index_mcp(_alloc)
    , middle_mcp(_alloc)
    , ring_mcp(_alloc)
    , pinky_mcp(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::String_<ContainerAllocator>  _handedness_type;
  _handedness_type handedness;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _wrist_type;
  _wrist_type wrist;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _thumb_tip_type;
  _thumb_tip_type thumb_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_tip_type;
  _index_tip_type index_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_tip_type;
  _middle_tip_type middle_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_tip_type;
  _ring_tip_type ring_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_tip_type;
  _pinky_tip_type pinky_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_mcp_type;
  _index_mcp_type index_mcp;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_mcp_type;
  _middle_mcp_type middle_mcp;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_mcp_type;
  _ring_mcp_type ring_mcp;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_mcp_type;
  _pinky_mcp_type pinky_mcp;





  typedef boost::shared_ptr< ::handover::hand_mp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handover::hand_mp_<ContainerAllocator> const> ConstPtr;

}; // struct hand_mp_

typedef ::handover::hand_mp_<std::allocator<void> > hand_mp;

typedef boost::shared_ptr< ::handover::hand_mp > hand_mpPtr;
typedef boost::shared_ptr< ::handover::hand_mp const> hand_mpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handover::hand_mp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handover::hand_mp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::handover::hand_mp_<ContainerAllocator1> & lhs, const ::handover::hand_mp_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.handedness == rhs.handedness &&
    lhs.wrist == rhs.wrist &&
    lhs.thumb_tip == rhs.thumb_tip &&
    lhs.index_tip == rhs.index_tip &&
    lhs.middle_tip == rhs.middle_tip &&
    lhs.ring_tip == rhs.ring_tip &&
    lhs.pinky_tip == rhs.pinky_tip &&
    lhs.index_mcp == rhs.index_mcp &&
    lhs.middle_mcp == rhs.middle_mcp &&
    lhs.ring_mcp == rhs.ring_mcp &&
    lhs.pinky_mcp == rhs.pinky_mcp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::handover::hand_mp_<ContainerAllocator1> & lhs, const ::handover::hand_mp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace handover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::handover::hand_mp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handover::hand_mp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handover::hand_mp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handover::hand_mp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handover::hand_mp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handover::hand_mp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handover::hand_mp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c180baaf221b3c9ea1b674a724ca2e79";
  }

  static const char* value(const ::handover::hand_mp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc180baaf221b3c9eULL;
  static const uint64_t static_value2 = 0xa1b674a724ca2e79ULL;
};

template<class ContainerAllocator>
struct DataType< ::handover::hand_mp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handover/hand_mp";
  }

  static const char* value(const ::handover::hand_mp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handover::hand_mp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"std_msgs/String handedness\n"
"geometry_msgs/Point wrist\n"
"geometry_msgs/Point thumb_tip\n"
"geometry_msgs/Point index_tip\n"
"geometry_msgs/Point middle_tip\n"
"geometry_msgs/Point ring_tip\n"
"geometry_msgs/Point pinky_tip\n"
"geometry_msgs/Point index_mcp\n"
"geometry_msgs/Point middle_mcp\n"
"geometry_msgs/Point ring_mcp\n"
"geometry_msgs/Point pinky_mcp\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::handover::hand_mp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handover::hand_mp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.handedness);
      stream.next(m.wrist);
      stream.next(m.thumb_tip);
      stream.next(m.index_tip);
      stream.next(m.middle_tip);
      stream.next(m.ring_tip);
      stream.next(m.pinky_tip);
      stream.next(m.index_mcp);
      stream.next(m.middle_mcp);
      stream.next(m.ring_mcp);
      stream.next(m.pinky_mcp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hand_mp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handover::hand_mp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handover::hand_mp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "handedness: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.handedness);
    s << indent << "wrist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.wrist);
    s << indent << "thumb_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb_tip);
    s << indent << "index_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_tip);
    s << indent << "middle_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_tip);
    s << indent << "ring_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_tip);
    s << indent << "pinky_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_tip);
    s << indent << "index_mcp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_mcp);
    s << indent << "middle_mcp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_mcp);
    s << indent << "ring_mcp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_mcp);
    s << indent << "pinky_mcp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_mcp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDOVER_MESSAGE_HAND_MP_H
